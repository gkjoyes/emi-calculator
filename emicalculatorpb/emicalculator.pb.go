// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: emi-calculator/emicalculatorpb/emicalculator.proto

package emicalculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EMICalculatorRequest includes required parameters to calculate monthly EMI.
type EMICalculatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownPayment           float64 `protobuf:"fixed64,1,opt,name=down_payment,json=downPayment,proto3" json:"down_payment,omitempty"`
	TotalAmount           float64 `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	InterestRate          float32 `protobuf:"fixed32,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	PropertyTaxes         float32 `protobuf:"fixed32,4,opt,name=property_taxes,json=propertyTaxes,proto3" json:"property_taxes,omitempty"`
	PropertyTransferTaxes float32 `protobuf:"fixed32,5,opt,name=property_transfer_taxes,json=propertyTransferTaxes,proto3" json:"property_transfer_taxes,omitempty"`
	YearsExpectedToLive   int32   `protobuf:"varint,6,opt,name=years_expected_to_live,json=yearsExpectedToLive,proto3" json:"years_expected_to_live,omitempty"`
}

func (x *EMICalculatorRequest) Reset() {
	*x = EMICalculatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMICalculatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMICalculatorRequest) ProtoMessage() {}

func (x *EMICalculatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMICalculatorRequest.ProtoReflect.Descriptor instead.
func (*EMICalculatorRequest) Descriptor() ([]byte, []int) {
	return file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescGZIP(), []int{0}
}

func (x *EMICalculatorRequest) GetDownPayment() float64 {
	if x != nil {
		return x.DownPayment
	}
	return 0
}

func (x *EMICalculatorRequest) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *EMICalculatorRequest) GetInterestRate() float32 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *EMICalculatorRequest) GetPropertyTaxes() float32 {
	if x != nil {
		return x.PropertyTaxes
	}
	return 0
}

func (x *EMICalculatorRequest) GetPropertyTransferTaxes() float32 {
	if x != nil {
		return x.PropertyTransferTaxes
	}
	return 0
}

func (x *EMICalculatorRequest) GetYearsExpectedToLive() int32 {
	if x != nil {
		return x.YearsExpectedToLive
	}
	return 0
}

// EMICalculatorResponse includes monthly EMI value.
type EMICalculatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthlyEmi float32 `protobuf:"fixed32,1,opt,name=monthly_emi,json=monthlyEmi,proto3" json:"monthly_emi,omitempty"`
}

func (x *EMICalculatorResponse) Reset() {
	*x = EMICalculatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMICalculatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMICalculatorResponse) ProtoMessage() {}

func (x *EMICalculatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMICalculatorResponse.ProtoReflect.Descriptor instead.
func (*EMICalculatorResponse) Descriptor() ([]byte, []int) {
	return file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescGZIP(), []int{1}
}

func (x *EMICalculatorResponse) GetMonthlyEmi() float32 {
	if x != nil {
		return x.MonthlyEmi
	}
	return 0
}

var File_emi_calculator_emicalculatorpb_emicalculator_proto protoreflect.FileDescriptor

var file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x6d, 0x69, 0x2d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x62,
	0x2f, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x45, 0x4d, 0x49, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x79, 0x65, 0x61, 0x72, 0x73, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x45,
	0x4d, 0x49, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f,
	0x65, 0x6d, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x45, 0x6d, 0x69, 0x32, 0x73, 0x0a, 0x14, 0x45, 0x4d, 0x49, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x4d, 0x49, 0x12, 0x23, 0x2e,
	0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x4d,
	0x49, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x4d, 0x49, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x65, 0x6d,
	0x69, 0x2d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x65, 0x6d, 0x69,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescOnce sync.Once
	file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescData = file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDesc
)

func file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescGZIP() []byte {
	file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescOnce.Do(func() {
		file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescData = protoimpl.X.CompressGZIP(file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescData)
	})
	return file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDescData
}

var file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_emi_calculator_emicalculatorpb_emicalculator_proto_goTypes = []interface{}{
	(*EMICalculatorRequest)(nil),  // 0: emicalculator.EMICalculatorRequest
	(*EMICalculatorResponse)(nil), // 1: emicalculator.EMICalculatorResponse
}
var file_emi_calculator_emicalculatorpb_emicalculator_proto_depIdxs = []int32{
	0, // 0: emicalculator.EMICalculatorService.CalculateEMI:input_type -> emicalculator.EMICalculatorRequest
	1, // 1: emicalculator.EMICalculatorService.CalculateEMI:output_type -> emicalculator.EMICalculatorResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_emi_calculator_emicalculatorpb_emicalculator_proto_init() }
func file_emi_calculator_emicalculatorpb_emicalculator_proto_init() {
	if File_emi_calculator_emicalculatorpb_emicalculator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMICalculatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMICalculatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_emi_calculator_emicalculatorpb_emicalculator_proto_goTypes,
		DependencyIndexes: file_emi_calculator_emicalculatorpb_emicalculator_proto_depIdxs,
		MessageInfos:      file_emi_calculator_emicalculatorpb_emicalculator_proto_msgTypes,
	}.Build()
	File_emi_calculator_emicalculatorpb_emicalculator_proto = out.File
	file_emi_calculator_emicalculatorpb_emicalculator_proto_rawDesc = nil
	file_emi_calculator_emicalculatorpb_emicalculator_proto_goTypes = nil
	file_emi_calculator_emicalculatorpb_emicalculator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EMICalculatorServiceClient is the client API for EMICalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EMICalculatorServiceClient interface {
	CalculateEMI(ctx context.Context, in *EMICalculatorRequest, opts ...grpc.CallOption) (*EMICalculatorResponse, error)
}

type eMICalculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEMICalculatorServiceClient(cc grpc.ClientConnInterface) EMICalculatorServiceClient {
	return &eMICalculatorServiceClient{cc}
}

func (c *eMICalculatorServiceClient) CalculateEMI(ctx context.Context, in *EMICalculatorRequest, opts ...grpc.CallOption) (*EMICalculatorResponse, error) {
	out := new(EMICalculatorResponse)
	err := c.cc.Invoke(ctx, "/emicalculator.EMICalculatorService/CalculateEMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EMICalculatorServiceServer is the server API for EMICalculatorService service.
type EMICalculatorServiceServer interface {
	CalculateEMI(context.Context, *EMICalculatorRequest) (*EMICalculatorResponse, error)
}

// UnimplementedEMICalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEMICalculatorServiceServer struct {
}

func (*UnimplementedEMICalculatorServiceServer) CalculateEMI(context.Context, *EMICalculatorRequest) (*EMICalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateEMI not implemented")
}

func RegisterEMICalculatorServiceServer(s *grpc.Server, srv EMICalculatorServiceServer) {
	s.RegisterService(&_EMICalculatorService_serviceDesc, srv)
}

func _EMICalculatorService_CalculateEMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EMICalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMICalculatorServiceServer).CalculateEMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emicalculator.EMICalculatorService/CalculateEMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMICalculatorServiceServer).CalculateEMI(ctx, req.(*EMICalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EMICalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emicalculator.EMICalculatorService",
	HandlerType: (*EMICalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateEMI",
			Handler:    _EMICalculatorService_CalculateEMI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emi-calculator/emicalculatorpb/emicalculator.proto",
}
